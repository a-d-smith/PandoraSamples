#include "services_microboone.fcl"
#include "time_memory_tracker_microboone.fcl"
#include "my_filter_settings.fcl"
process_name: filter

services:
{
  scheduler:             { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService:          { fileName: "fitler_hist.root" }
  TimeTracker:           @local::microboone_time_tracker
  MemoryTracker:         @local::microboone_memory_tracker
  RandomNumberGenerator: {} #ART native random number generator
}

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  -1        # Number of events to create
  saveMemoryObjectThreshold: 0
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

filters:
 {
        myfilter: @local::myfilter
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [  myfilter ]
 
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [ simulate ] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "%ifb_%tc_filter.root"
   dataTier:    "simulated"
   saveMemoryObjectThreshold: 0
   SelectEvents: { SelectEvents: [ simulate ] }	
   compressionLevel: 1
 }
}

physics.producers.myfilter.InteractionType: 1003
